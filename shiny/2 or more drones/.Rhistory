coordinatesForUPBlock[1,]
coordinatesForUPBlock[,which(coordinatesForUPBlock$flag == TRUE)]
coordinatesForUPBlock[1,which(coordinatesForUPBlock$flag == TRUE)]
which(coordinatesForUPBlock$flag == TRUE)
coordinatesForUPBlock[2]
coordinatesForUPBlock[,2]
coordinatesForUPBlock[2,]
coordinatesForUPBlock[which(coordinatesForUPBlock$flag == TRUE),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
coordinatesForUPAll
coordinatesForUPBlock
coordinatesForUP
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
length(coordinatesForUP[which(coordinatesForUP$flag == TRUE), ])
length(coordinatesForUP[,which(coordinatesForUP$flag == TRUE)])
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
which(coordinatesForUP$flag == TRUE)
length(which(coordinatesForUP$flag == TRUE))
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
coordinatesForUP
coordinatesForUP[, "flag"] = FALSE
coordinatesForUP
(length(coordinatesForUP[,1]) > 0)
coordinatesForUPBlock <<- coordinatesForUP
coordinatesForUPBlock
runApp()
runApp()
coordinatesForUPBlock
runApp()
coordinatesForUP
coordinatesForUPBlock
length(APPoint[,1])
APPoint[,1]
length(APPointAll[,1])
runApp()
APPointAll
length(APPointAll[,1])
APPointAll[2,]
APPoint <- APPointAll[k,]
APPoint
k=2
APPoint <- APPointAll[k,]
APPoint
APPoint[1,1]
APPoint$x[1]
APPoint$x
APPoint$y
coordinatesForUPAll
coordinatesForUPBlock
coordinatesForUP
runApp()
runApp()
APPoint
buildingInfo
BuildNumber
n
runApp()
runApp()
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
runApp()
runApp()
pConnect
coordinatesForUP
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
coordinatesForUP
coordinatesForUP
runApp()
coordinatesForUP
runApp()
coordinatesForUP
coordinatesForUPAll
runApp()
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
runApp()
runApp()
coordinatesForUPBlock
runApp()
runApp()
BuildNumber
APPoint
coordinatesForUP
buildingInfo
APPoint
runApp()
coordinatesForUPTest
runApp()
coordinatesForUPCache
runApp()
coordinatesForUPCache
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPCache[which(coordinatesForUPCache$flag == FALSE), ]
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
runApp()
coordinatesForUPCache
runApp()
coordinatesForUPCache
APPointAll
APPoint
help(runApp)
runApp(display.mode = 'showcase')
runApp( test.mode = getOption("shiny.testmode", TRUE)')
#
$
))
..glhi;
gyui1``
quit
exit
quit()
runApp()
coordinatesForUP <- coordinatesForUPCache
aaa
``
runApp()
coordinatesForUPTest
length(coordinatesForUPTest[,1]
)
runApp()
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPCache[which(coordinatesForUPCache$flag == FALSE), ]
length(coordinatesForUPCache[which(coordinatesForUPCache$flag == FALSE), ])
length(coordinatesForUPCache[, which(coordinatesForUPCache$flag == FALSE)])
runApp()
coordinatesForUPCache
length(coordinatesForUP[,1])
length(coordinatesForUPCache[,1])
HTx[k]
HTx[1]
runApp()
HTx
length(APPointAll[,1])
runApp()
runApp()
runApp()
coordinatesForUPBlock
coordinatesForUPCache
runApp()
coordinatesForUPTest
length(coordinatesForUPTest[,1])
runApp()
coordinatesForUPTest
length(coordinatesForUPTest[,1])
runApp()
length(coordinatesForUPTest[,1])
runApp()
length(coordinatesForUPTest[,1])
APPoint
runApp()
length(coordinatesForUPTest[,1])
length(coordinatesForUPTest1[,1])
length(coordinatesForUPTest2[,1])
runApp()
coordinatesForUPTest1
length(coordinatesForUPTest1[,1])
length(coordinatesForUPTest2[,1])
runApp()
length(coordinatesForUPTest2[,1])
length(coordinatesForUPTest1[,1])
runApp()
coordinatesForUPTest1
length(coordinatesForUPTest1[,1])
length(coordinatesForUPTest2[,1])
length(coordinatesForUPTest2[,"flag" == TRUE])
length(coordinatesForUPTest2[,"flag" == FALSE])
length(coordinatesForUPTest2[])
length(coordinatesForUPTest2[, "flag"])
length(coordinatesForUPTest2["flag"])
length(coordinatesForUPTest2["flag",])
coordinatesForUPTest2[,"flag"]
coordinatesForUPTest2[,"flag" = FALSE]
coordinatesForUPTest2[,"flag" == FALSE]
coordinatesForUPTest2[,"flag" == TRUE]
coordinatesForUPTest2[,1]
coordinatesForUPTest2[1,1]
coordinatesForUPTest2[2,1]
coordinatesForUPTest2[which(coordinatesForUPTest2$flag == FALSE),1]
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == FALSE),1])
coordinatesForUPTest2
coordinatesForUPTest2
coordinatesForUPTest1
runApp()
coordinatesForUPTest1
coordinatesForUPTest2
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), 1]
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == FALSE),1])
coordinatesForUP[which(coordinatesForUP$flag == TRUE),1]
coordinatesForUP[which(coordinatesForUP$flag == TRUE),]
coordinatesForUP[which(coordinatesForUP$flag == TRUE),]
coordinatesForUP
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
data.frame(x = runif(n, 0, gridSize$x), y = runif(n, 0, gridSize$y),
H = array(2, n), flag = array(FALSE, n), xInter = array(NA, n),
yInter = array(NA, n), l = array(NA, n),
l1 = array(NA, n), l2 = array(NA, n))
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
coordinatesForUPCache <<- coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
coordinatesForUPCache
length(coordinatesForUPCache[,1])
coordinatesForUPCache$flag = FALSE
length(coordinatesForUPCache[,1])
coordinatesForUPCache
runApp()
coordinatesForUPTest2
length(coordinatesForUPTest1)
length(coordinatesForUPTest1[,1])
length(coordinatesForUPTest2[,1])
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE)], 1)
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE)],)
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE)])
length(coordinatesForUPTest2[1,which(coordinatesForUPTest2$flag == TRUE)])
length(coordinatesForUPTest2[,which(coordinatesForUPTest2$flag == TRUE)])
coordinatesForUPTest2[,which(coordinatesForUPTest2$flag == TRUE)]
coordinatesForUPTest2
coordinatesForUPTest2$flag == FALSE
coordinatesForUPTest2[coordinatesForUPTest2$flag == FALSE]
coordinatesForUPTest2[,coordinatesForUPTest2$flag == FALSE]
coordinatesForUPTest2[1,coordinatesForUPTest2$flag == FALSE]
coordinatesForUPTest2[1]
coordinatesForUPTest2[,1]
coordinatesForUPTest2[,which(coordinatesForUPTest2$flag == FALSE)]
coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE), ]
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE), ])
length(coordinatesForUPTest2[which(coordinatesForUPTest2$flag == TRUE), 1])
length(coordinatesForUPTest1[which(coordinatesForUPTest1$flag == TRUE), 1])
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
coordinatesForUP[which(coordinatesForUP$flag == TRUE), ]
runApp()
coordinatesForUPBlock
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
length(coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ])
length(coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), 1])
length(coordinatesForUPCache[,1])
k == length(APPointAll[,1])
k=2
k == length(APPointAll[,1])
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPBlock
coordinatesForUPBlock <<- coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPBlock
coordinatesForUPBlock
plot(0, 0, xlim = c(0, gridSize$x), ylim = c(0,gridSize$y), col = "white")
for (i in 1:BuildNumber) {
lines(x = c(buildingInfo$x1[i], buildingInfo$x2[i]), y = c(buildingInfo$y1[i], buildingInfo$y2[i]))
}
points(coordinatesForUPAll$x, coordinatesForUPAll$y, pch = 19, col = "green")
length(coordinatesForUPBlock[,1] != 0)
if (length(coordinatesForUPBlock[,1] != 0)) {
points(coordinatesForUPBlock$x, coordinatesForUPBlock$y, pch = 19, col = "red")
}
points(APPointAll$x, APPointAll$y, pch = 19, col = "black")
coordinatesForUPBlock <<- data.frame()
coordinatesForUPBlock
length(APPointAll[,1])
runApp()
coordinatesForUPBlock
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
length(coordinatesForUPCache[,1]) == 0
coordinatesForUPCache$flag <<- FALSE
coordinatesForUPCache
coordinatesForUPCache[which(coordinatesForUPCache$flag == TRUE), ]
coordinatesForUPBlock
coordinatesForUPTest2
coordinatesForUPTest1
runApp()
coordinatesForUPBlock
coordinatesForUPCache
runApp()
coordinatesForUPTest1
runApp()
coordinatesForUPTest1
coordinatesForUPCache
coordinatesForUPTest1
coordinatesForUPCache
coordinatesForUPTest1
coordinatesForUPCache
coordinatesForUPTest1
coordinatesForUPTest1
coordinatesForUPTest1
coordinatesForUPCache
coordinatesForUPTest1 <<- coordinatesForUPCache
coordinatesForUPTest1
coordinatesForUPCache
runApp()
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
shiny::runApp()
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
runApp()
ttt <<- 10
coordinatesForUPBlock
runApp()
coordinatesForUPBlock
coordinatesForUPCache
coordinatesForUPBlock
runApp()
tt
coordinatesForUPCache
coordinatesForUPCache
help(within)
help("within.data.frame")
coordinatesForUPCache
coordinatesForUPCache <<- within.data.frame(coordinatesForUPCache, {
coordinatesForUPCache$flag = FALSE })
coordinatesForUPCache
coordinatesForUPCache
runApp()
coordinatesForUPCache
coordinatesForUPCache <<- within(coordinatesForUPCache, {
coordinatesForUPCache$flag = FALSE })
coordinatesForUPCache
coordinatesForUPCache$flag[]
coordinatesForUPCache
coordinatesForUPCache
coordinatesForUPCache$flag
runApp()
coordinatesForUPCache
length(APPointAll[,1])
runApp()
coordinatesForUPCache
coordinatesForUPBlock
coordinatesForUPCache
runApp()
runApp()
plot(0, 0, xlim = c(0, gridSize$x), ylim = c(0,gridSize$y), col = "white")
for (i in 1:BuildNumber) {
lines(x = c(buildingInfo$x1[i], buildingInfo$x2[i]), y = c(buildingInfo$y1[i], buildingInfo$y2[i]))
}
points(APPointAll$x, APPointAll$y, pch = 19, col = "black")
help(points)
points(APPointAll$x, APPointAll$y, pch = 19, par(ps = 3) col = "black")
points(APPointAll$x, APPointAll$y, pch = 19, par(ps = 3), col = "black")
points(APPointAll$x, APPointAll$y, pch = 19, par(ps = '3'), col = "black")
par(ps = '3')
par(ps = 3)
points(APPointAll$x, APPointAll$y, pch = 19, col = "black")
par(ps = 10)
points(APPointAll$x, APPointAll$y, pch = 19, col = "black")
points(APPointAll$x, APPointAll$y, pch = 19, cex = 10, col = "black")
points(APPointAll$x, APPointAll$y, pch = 19, cex = 3, col = "black")
plot(0, 0, xlim = c(0, gridSize$x), ylim = c(0,gridSize$y), col = "white")
points(APPointAll$x, APPointAll$y, pch = 19, cex = 3, col = "black")
points(APPointAll$x, APPointAll$y, pch = 19, cex = 1.5, col = "black")
plot(0, 0, xlim = c(0, gridSize$x), ylim = c(0,gridSize$y), col = "white")
points(APPointAll$x, APPointAll$y, pch = 19, cex = 1.5, col = "black")
runApp()
runApp()
shiny::runApp()
n
coordinatesForUPCache
length(coordinatesForUP[coordinatesForUP[,"flag"] == TRUE,1])
coordinatesForUPCache
length(coordinatesForUPCache[,1])
12/100
runApp()
n
length(coordinatesForUPCache[,1])
59/100
1-0.59
length(coordinatesForUPAll[,1])
shiny::runApp()
pConnect
runApp()
xxx <- 32.4 + 40*log10(100) + 20*log10(28)
xx
xxx
xxx <- 32.4 + 21*log10(100) + 20*log10(28)
xxx
xxx <- 32.4 + 21*log10(1000) + 20*log10(28)
xxx
xxx <- 32.4 + 21*log10(10) + 20*log10(28)
xxx
xxx <- 32.4 + 21*log10(1) + 20*log10(28)
xxx
xxx <- 32.4 + 21*log10(5000) + 20*log10(28)
ччч
xxx
shiny::runApp()
runApp()
plot(-100,-100, xlim = c(0,100), ylim = c(0,100), xlab  = 'x', ylab = 'y')
grid(nx=100, ny=100, lty= 1)
points(50,50, pch = 19)
lines(x = c(mass$x1[1],mass$x2[1]), y = c(mass$y1[1],mass$y2[1]))
lines(x = c(mass$x1[2],mass$x2[2]), y = c(mass$y1[2],mass$y2[2]))
lines(x = c(mass$x1[3],mass$x2[3]), y = c(mass$y1[3],mass$y2[3]))
lines(x = c(mass$x1[4],mass$x2[4]), y = c(mass$y1[4],mass$y2[4]))
lines(x = c(mass$x1[5],mass$x2[5]), y = c(mass$y1[5],mass$y2[5]))
lines(x=c(50,10), y=c(50,90), col = 'red')
points(10,90, pch = 19, col = 'red')
text(20,90, labels = expression('l'[m]), cex = 2)
text(30,60, labels = expression('l'[all]), cex = 2)
mass$x1[1] = 7*2.5
mass$y1[1] = 15*2.5
mass$x2[1] = 9*2.5
mass$y2[1] = 20*2.5
mass$x1[2] = 1*2.5
mass$y1[2] = 25*2.5
mass$x2[2] = 15*2.5
mass$y2[2] = 35*2.5
mass$x1[3] = 30*2.5
mass$y1[3] = 2*2.5
mass$x2[3] = 33*2.5
mass$y2[3] = 30*2.5
mass$x1[4] = 10*2.5
mass$y1[4] = 10*2.5
mass$x2[4] = 25*2.5
mass$y2[4] = 5*2.5
mass$x1[5] = 20*2.5
mass$y1[5] = 32*2.5
mass$x2[5] = 30*2.5
mass$y2[5] = 30*2.5
N <- 5
mass <- data.frame(x1 = array(NA, N), y1 = array(NA, N), x2 = array(NA, N), y2 = array(NA, N))
mass$x1[1] = 7*2.5
mass$y1[1] = 15*2.5
mass$x2[1] = 9*2.5
mass$y2[1] = 20*2.5
mass$x1[2] = 1*2.5
mass$y1[2] = 25*2.5
mass$x2[2] = 15*2.5
mass$y2[2] = 35*2.5
mass$x1[3] = 30*2.5
mass$y1[3] = 2*2.5
mass$x2[3] = 33*2.5
mass$y2[3] = 30*2.5
mass$x1[4] = 10*2.5
mass$y1[4] = 10*2.5
mass$x2[4] = 25*2.5
mass$y2[4] = 5*2.5
mass$x1[5] = 20*2.5
mass$y1[5] = 32*2.5
mass$x2[5] = 30*2.5
mass$y2[5] = 30*2.5
plot(-100,-100, xlim = c(0,100), ylim = c(0,100), xlab  = 'x', ylab = 'y')
grid(nx=100, ny=100, lty= 1)
points(50,50, pch = 19)
lines(x = c(mass$x1[1],mass$x2[1]), y = c(mass$y1[1],mass$y2[1]))
lines(x = c(mass$x1[2],mass$x2[2]), y = c(mass$y1[2],mass$y2[2]))
lines(x = c(mass$x1[3],mass$x2[3]), y = c(mass$y1[3],mass$y2[3]))
lines(x = c(mass$x1[4],mass$x2[4]), y = c(mass$y1[4],mass$y2[4]))
lines(x = c(mass$x1[5],mass$x2[5]), y = c(mass$y1[5],mass$y2[5]))
lines(x=c(50,10), y=c(50,90), col = 'red')
points(10,90, pch = 19, col = 'red')
text(20,90, labels = expression('l'[m]), cex = 2)
text(30,60, labels = expression('l'[all]), cex = 2)
lines(x = c(20,40), y = c(60,70))
lines(x = c(20,40), y = c(60,80))
lines(x = c(20,40), y = c(70,80))
text(20,90, labels = expression('l'[m][m]), cex = 2)
plot(-100,-100, xlim = c(0,100), ylim = c(0,100), xlab  = 'x', ylab = 'y')
grid(nx=100, ny=100, lty= 1)
points(50,50, pch = 19)
lines(x = c(mass$x1[1],mass$x2[1]), y = c(mass$y1[1],mass$y2[1]))
lines(x = c(mass$x1[2],mass$x2[2]), y = c(mass$y1[2],mass$y2[2]))
lines(x = c(mass$x1[3],mass$x2[3]), y = c(mass$y1[3],mass$y2[3]))
lines(x = c(mass$x1[4],mass$x2[4]), y = c(mass$y1[4],mass$y2[4]))
lines(x = c(mass$x1[5],mass$x2[5]), y = c(mass$y1[5],mass$y2[5]))
lines(x = c(20,40), y = c(70,80))
lines(x=c(50,10), y=c(50,90), col = 'red')
points(10,90, pch = 19, col = 'red')
text(20,90, labels = expression('l'[m][m]), cex = 2)
text(30,60, labels = expression('l'[all]), cex = 2)
plot(-100,-100, xlim = c(0,100), ylim = c(0,100), xlab  = 'x', ylab = 'y')
#grid(nx=100, ny=100, lty= 1)
points(50,50, pch = 19)
lines(x = c(mass$x1[1],mass$x2[1]), y = c(mass$y1[1],mass$y2[1]))
lines(x = c(mass$x1[2],mass$x2[2]), y = c(mass$y1[2],mass$y2[2]))
lines(x = c(mass$x1[3],mass$x2[3]), y = c(mass$y1[3],mass$y2[3]))
lines(x = c(mass$x1[4],mass$x2[4]), y = c(mass$y1[4],mass$y2[4]))
lines(x = c(mass$x1[5],mass$x2[5]), y = c(mass$y1[5],mass$y2[5]))
lines(x = c(20,40), y = c(70,80))
lines(x=c(50,10), y=c(50,90), col = 'red')
points(10,90, pch = 19, col = 'red')
text(20,90, labels = expression('l'[m]), cex = 2)
text(30,60, labels = expression('l'[all]), cex = 2)
