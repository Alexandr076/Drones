y = coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
}
plot(0, 0, xlim = c( (coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)]),
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)]),
ylim = c( (coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)]),
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)]) )
for (i in 1:length(coordinatesForBuildings$Number)) {
lines(x = coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
y = coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
}
data$features[1]
data$features[[1]]
coordinatesForBuildings <- data.frame("Level" = array(NA, 1), "Number" = array(NA, 1),
"x" = array(NA, 1), "y" = array(NA, 1))
data$features[[1]]$properties
data$features[[1]]$properties[1]
data$features[[1]]$properties[2]
data$features[[1]]$properties[3]
data$features[[1]]$properties["building:levels"]
data$features[[1]]$properties["building:levels"][1]
typeof(data$features[[1]]$properties["building:levels"])
as.double(data$features[[1]]$properties["building:levels"])
tryCatch({
level <- as.double(data$features[[1]]$properties["building:levels"])
},
error = function(e) {
level <- 1
}
)
setwd("C:/R/maps")
data <- fromJSON("data_file.json")
coordinatesForBuildings <- data.frame("Level" = array(NA, 1), "Number" = array(NA, 1),
"x" = array(NA, 1), "y" = array(NA, 1))
tryCatch({
i <- 1
while (TRUE) {
if (data$features[[i]]$geometry$type == "Polygon") {
j <- 1
while (j <= length(data$features[[i]]$geometry$coordinates[[1]])) {
x <- data$features[[i]]$geometry$coordinates[[1]][[j]][1]
y <- data$features[[i]]$geometry$coordinates[[1]][[j]][2]
tryCatch({
level <- as.double(data$features[[i]]$properties["building:levels"])
},
error = function(e) {
level <- 1
}
)
buf <- data.frame("Level" = level, "Number" = i, "x" = x, "y" = y)
coordinatesForBuildings <- rbind(coordinatesForBuildings, buf)
j <- j + 1
}
}
i <- i + 1
}
},
error = function(e) {
print("hh")
}
)
plot(0, 0, xlim = c( (coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)]),
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)]),
ylim = c( (coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)]),
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)]) )
for (i in 1:length(coordinatesForBuildings$Number)) {
lines(x = coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
y = coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
}
coordinatesForBuildings
coordinatesForBuildings$Level
coordinatesForBuildings$Number
data$features[[1]]$properties["building:levels"]
data$features[[10]]$properties["building:levels"]
data$features[[15]]$properties["building:levels"]
library('RJSONIO')
library(DT)
setwd("C:/R/maps")
data <- fromJSON("data_file.json")
coordinatesForBuildings <- data.frame("Level" = array(NA, 1), "Number" = array(NA, 1),
"x" = array(NA, 1), "y" = array(NA, 1))
tryCatch({
i <- 1
while (TRUE) {
if (data$features[[i]]$geometry$type == "Polygon") {
j <- 1
while (j <= length(data$features[[i]]$geometry$coordinates[[1]])) {
x <- data$features[[i]]$geometry$coordinates[[1]][[j]][1]
y <- data$features[[i]]$geometry$coordinates[[1]][[j]][2]
if ( (is.na(as.double(data$features[[i]]$properties["building:levels"]))) ) {
level <- 1
}
else {
level <- as.double(data$features[[i]]$properties["building:levels"])
}
buf <- data.frame("Level" = level, "Number" = i, "x" = x, "y" = y)
coordinatesForBuildings <- rbind(coordinatesForBuildings, buf)
j <- j + 1
}
}
i <- i + 1
}
},
error = function(e) {
}
)
plot(0, 0, xlim = c( (coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)]),
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)]),
ylim = c( (coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)]),
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)]) )
for (i in 1:length(coordinatesForBuildings$Number)) {
lines(x = coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
y = coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
}
coordinatesForBuildings
coordinatesForBuildings$Level
for (i in 1:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
lines(x, y)
polygon(x, y, col = level)
}
help(col)
coordinatesForBuildings$Level
coordinatesForBuildings$Level[2:]
coordinatesForBuildings$Level[2,]
polygon(x, y, col(coordinatesForBuildings$Level[2:length(coordinatesForBuildings$Level)], as.factor = TRUE))
for (i in 1:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
lines(x, y)
polygon(x, y, col(coordinatesForBuildings$Level[2:length(coordinatesForBuildings$Level)], as.factor = TRUE))
}
polygon(x, y, col = colours())
for (i in 1:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
lines(x, y)
polygon(x, y, col = colours())
}
help(col)
levels <- coordinatesForBuildings$Level
levels
levels <- levels[2:length(levels)]
levels
col(levels, as.factor = TRUE)
for (i in 2:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
lines(x, y)
polygon(x, y, col = 0.12)
}
plot(0, 0, xlim = c( (coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)]),
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)]),
ylim = c( (coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)]),
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)]) )
for (i in 2:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
lines(x, y)
polygon(x, y, col = 0.12)
}
levelsGroup <- as.factor(levels)
levelsGroup
install.packages("network")
library('network')
library('network')
as.color(levelsGroup)
as.color(levels)
levels
levelsGroup
for (i in 2:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
lines(x, y)
polygon(x, y, col = levelsGroup)
}
levelsGroup
length(coordinatesForBuildings$Number
)
for (i in 2:length(coordinatesForBuildings$Number)) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
lines(x, y)
polygon(x, y, col = levelsGroup[i])
}
levelsGroup
levelsGroup <- as.factor(levels)
levelsGroup
levelsGroup <- as.color(levelsGroup)
levelsGroup
length(coordinatesForBuildings$Number
)
coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]
for (i in 2:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
lines(x, y)
polygon(x, y, col = levelsGroup[i])
}
install.packages(''dichromat'')
install.packages('dichromat')
library('dichromat')
library('dichromat')
cols <- colorRampPalette(levelsGroup)
cols
colss <- colorRampPalette(levelsGroup)
tt <- colorRampPalette(levelsGroup)
tt
redblue<-colorRampPalette(c("red","orange","blue"),method="linear")
redblue <- colorRampPalette(c("red","orange","blue"),method="linear")
yb<-colorRampPalette(c("yellow2","goldenrod","darkred"),bias=0.5)
yb
filled.contour(m,color.palette=yb)
levelsGroup <- as.factor(levels)
levelsGroup
levelsGroup$Levels
levelsGroup
levelsGroup <- as.color(levelsGroup)
levelsGroup
levelsGroup <- seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1)
levelsGroup
yb <- colorRampPalette(levelsGroup, bias=0.5)
for (i in 2:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
levelsGroup <- seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1)
lines(x, y)
polygon(x, y, colorRamp(levelsGroup, bias=0.5))
}
i=2
x <- coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)]
y <- coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]
level <- coordinatesForBuildings$Level[which(coordinatesForBuildings$Number == i)]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
levelsGroup <- seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1)
lines(x, y)
polygon(x, y, colorRamp(levelsGroup, bias=0.5))
filled.contour(x, y, color.palette = yb)
polygon(x, y, colorRampPalette(levelsGroup, bias = 0.5))
levelsGroup
typeof(levelsGroup)
levelsGroup <- as.vector(seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1))
polygon(x, y, colorRampPalette(levelsGroup, bias = 0.5))
levelsGroup
typeof(levelsGroup)
levelsGroup <- as.list(seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1))
polygon(x, y, colorRampPalette(levelsGroup, bias = 0.5))
levelsGroup
typeof(levelsGroup)
levelsGroup <- as.vector(seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1))
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
levelsGroup <- as.vector(seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1))
typeof(levelsGroup)
levelsGroup[1]
levelsGroup[2]
levels <- coordinatesForBuildings$Level
levelsGroup <- as.factor(levels)
levelsGroup <- as.color(levelsGroup)
levelsGroup <- c(seq(levelsGroup[which.min(levelsGroup)], levelsGroup[which.max(levelsGroup)], 1))
typeof(levelsGroup)
polygon(x, y, colorRampPalette(as.vector(levelsGroup), bias = 0.5))
levelsGroup <- c(levelsGroup[which.min(levelsGroup)]:levelsGroup[which.max(levelsGroup)])
levelsGroup
typeof(levelsGroup)
levelsGroup[1]
polygon(x, y, colorRampPalette(levelsGroup, bias = 0.5))
levelsGroup <- as.vector(levelsGroup)
typeof(levelsGroup)
type.convert(levelsGroup)
as.vector.factor(levelsGroup)
as.vector.factor(levelsGroup)
as.vector.factor(levelsGroup, mode = 'any')
levelsGroup <- c(levelsGroup[which.min(levelsGroup)]:levelsGroup[which.max(levelsGroup)])
polygon(x, y, colorRampPalette(levelsGroup, bias = 0.5))
levelsGroup
coordinatesForBuildings
library('sp')
coordinatesForUP <- data.frame("x", "y")
coordinatesForUP <- data.frame("x" = NA, "y" = NA)
coordinatesForUP <- data.frame("x" = NA, "y" = NA)
cache <- 1
while(TRUE) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x <- x
coordinatesForUP$y <- y
cache <- cache + 1
}
}
}
coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]
while(TRUE) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x <- x
coordinatesForUP$y <- y
cache <- cache + 1
}
}
}
i=1
point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x <- x
coordinatesForUP$y <- y
cache <- cache + 1
}
coordinatesForUP <- data.frame("x" = NA, "y" = NA)
cache <- 1
while(TRUE) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x[i] <- x
coordinatesForUP$y[i] <- y
cache <- cache + 1
}
}
}
coordinatesForUP <- data.frame("x" = array(NA, 500), "y" = array(NA, 500))
cache <- 1
while(TRUE) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x[i] <- x
coordinatesForUP$y[i] <- y
cache <- cache + 1
}
}
}
coordinatesForUP <- data.frame("x" = array(NA, 500), "y" = array(NA, 500))
cache <- 1
while(cache <= 500) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
coordinatesForUP$x[i] <- x
coordinatesForUP$y[i] <- y
cache <- cache + 1
}
}
}
coordinatesForUP
plot(coordinatesForUP)
coordinatesForUP <- data.frame("x" = array(NA, 500), "y" = array(NA, 500))
cache <- 1
while(cache <= 500) {
coordinatesForUP$x <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x, coordinatesForUP$y,
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
buildingCache <- i
}
else {
break()
}
}
if (buildingCache == 42) {
cache <- cache + 1
}
}
coordinatesForUP
coordinatesForUP <- data.frame("x" = array(NA, 500), "y" = array(NA, 500))
cache <- 1
while(cache <= 500) {
coordinatesForUP$x[cache] <- runif(1, coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)],
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)])
coordinatesForUP$y[cache] <- runif(1, coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)],
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)])
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
if ( !point.in.polygon(coordinatesForUP$x[cache], coordinatesForUP$y[cache],
coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)]) ) {
buildingCache <- i
}
else {
break()
}
}
if (buildingCache == 42) {
cache <- cache + 1
}
}
coordinatesForUP
plot(0, 0, xlim = c( (coordinatesForBuildings$x[which.min(coordinatesForBuildings$x)]),
coordinatesForBuildings$x[which.max(coordinatesForBuildings$x)]),
ylim = c( (coordinatesForBuildings$y[which.min(coordinatesForBuildings$y)]),
coordinatesForBuildings$y[which.max(coordinatesForBuildings$y)]) )
for (i in 1:coordinatesForBuildings$Number[which.max(coordinatesForBuildings$Number)]) {
lines(x = coordinatesForBuildings$x[which(coordinatesForBuildings$Number == i)],
y = coordinatesForBuildings$y[which(coordinatesForBuildings$Number == i)])
}
points(coordinatesForUP)
shiny::runApp('C:/R/Drones/shiny')
source('functions.R')
getwd
getwd()
setwd(C:/R/Drones/shiny/2 or more drones)
setwd("C:/R/Drones/shiny/2 or more drones")
setwd("C:/R/Drones/shiny/")
source('functions.R')
source('functions.R')
runApp()
runApp()
runApp()
help(fromJSON)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library('RJSONIO')
runApp()
dataFromJson
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
coordinatesForBuildings
dataFromJson
coordinatesForBuildings <- PointsForBuildingFromJson(dataFromJson, coordinatesForBuildings)
print(coordinatesForBuildings$Number)
dataFromJson
coordinatesForBuildings
coordinatesForBuildings <<- data.frame("Level" = array(NA, 1), "Number" = array(NA, 1),
"x" = array(NA, 1), "y" = array(NA, 1), H = NA, L = array(NA, 1))
coordinatesForBuildings <<- PointsForBuildingFromJson(dataFromJson, coordinatesForBuildings)
print(coordinatesForBuildings$Number)
PointsForBuildingFromJson(dataFromJson, coordinatesForBuildings)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(plotOutput)
help(plotOutput)
runApp()
runApp()
